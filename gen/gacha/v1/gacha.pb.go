// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: gacha/v1/gacha.proto

package gachav1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Soft pity curve mode. Matches our engine's two modes.
type SoftPityMode int32

const (
	SoftPityMode_SOFT_PITY_MODE_UNSPECIFIED SoftPityMode = 0
	// Interpolate base p -> target across [start .. pity-1] using easing.
	SoftPityMode_SOFT_PITY_MODE_TARGET_RAMP SoftPityMode = 1
	// Add a fixed increment to probability each draw after start.
	SoftPityMode_SOFT_PITY_MODE_PER_DRAW_INCREMENT SoftPityMode = 2
)

// Enum value maps for SoftPityMode.
var (
	SoftPityMode_name = map[int32]string{
		0: "SOFT_PITY_MODE_UNSPECIFIED",
		1: "SOFT_PITY_MODE_TARGET_RAMP",
		2: "SOFT_PITY_MODE_PER_DRAW_INCREMENT",
	}
	SoftPityMode_value = map[string]int32{
		"SOFT_PITY_MODE_UNSPECIFIED":        0,
		"SOFT_PITY_MODE_TARGET_RAMP":        1,
		"SOFT_PITY_MODE_PER_DRAW_INCREMENT": 2,
	}
)

func (x SoftPityMode) Enum() *SoftPityMode {
	p := new(SoftPityMode)
	*p = x
	return p
}

func (x SoftPityMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoftPityMode) Descriptor() protoreflect.EnumDescriptor {
	return file_gacha_v1_gacha_proto_enumTypes[0].Descriptor()
}

func (SoftPityMode) Type() protoreflect.EnumType {
	return &file_gacha_v1_gacha_proto_enumTypes[0]
}

func (x SoftPityMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoftPityMode.Descriptor instead.
func (SoftPityMode) EnumDescriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{0}
}

// Easing used by TARGET_RAMP mode.
type Easing int32

const (
	Easing_EASING_UNSPECIFIED       Easing = 0
	Easing_EASING_LINEAR            Easing = 1
	Easing_EASING_EASE_OUT_QUAD     Easing = 2
	Easing_EASING_EASE_IN_OUT_CUBIC Easing = 3
)

// Enum value maps for Easing.
var (
	Easing_name = map[int32]string{
		0: "EASING_UNSPECIFIED",
		1: "EASING_LINEAR",
		2: "EASING_EASE_OUT_QUAD",
		3: "EASING_EASE_IN_OUT_CUBIC",
	}
	Easing_value = map[string]int32{
		"EASING_UNSPECIFIED":       0,
		"EASING_LINEAR":            1,
		"EASING_EASE_OUT_QUAD":     2,
		"EASING_EASE_IN_OUT_CUBIC": 3,
	}
)

func (x Easing) Enum() *Easing {
	p := new(Easing)
	*p = x
	return p
}

func (x Easing) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Easing) Descriptor() protoreflect.EnumDescriptor {
	return file_gacha_v1_gacha_proto_enumTypes[1].Descriptor()
}

func (Easing) Type() protoreflect.EnumType {
	return &file_gacha_v1_gacha_proto_enumTypes[1]
}

func (x Easing) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Easing.Descriptor instead.
func (Easing) EnumDescriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{1}
}

// Monte Carlo trial goal.
type TrialGoal int32

const (
	TrialGoal_TRIAL_GOAL_UNSPECIFIED  TrialGoal = 0
	TrialGoal_TRIAL_GOAL_FIRST_HIT    TrialGoal = 1 // draws until first high-rarity hit
	TrialGoal_TRIAL_GOAL_FIRST_UP     TrialGoal = 2 // draws until first UP (banner-aware)
	TrialGoal_TRIAL_GOAL_FIXED_BUDGET TrialGoal = 3 // count hits/UPs within a fixed N
)

// Enum value maps for TrialGoal.
var (
	TrialGoal_name = map[int32]string{
		0: "TRIAL_GOAL_UNSPECIFIED",
		1: "TRIAL_GOAL_FIRST_HIT",
		2: "TRIAL_GOAL_FIRST_UP",
		3: "TRIAL_GOAL_FIXED_BUDGET",
	}
	TrialGoal_value = map[string]int32{
		"TRIAL_GOAL_UNSPECIFIED":  0,
		"TRIAL_GOAL_FIRST_HIT":    1,
		"TRIAL_GOAL_FIRST_UP":     2,
		"TRIAL_GOAL_FIXED_BUDGET": 3,
	}
)

func (x TrialGoal) Enum() *TrialGoal {
	p := new(TrialGoal)
	*p = x
	return p
}

func (x TrialGoal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrialGoal) Descriptor() protoreflect.EnumDescriptor {
	return file_gacha_v1_gacha_proto_enumTypes[2].Descriptor()
}

func (TrialGoal) Type() protoreflect.EnumType {
	return &file_gacha_v1_gacha_proto_enumTypes[2]
}

func (x TrialGoal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrialGoal.Descriptor instead.
func (TrialGoal) EnumDescriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{2}
}

// Identifies a game/pool to load config for.
type GameRef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Game          string                 `protobuf:"bytes,1,opt,name=game,proto3" json:"game,omitempty"` // e.g., "hsr", "bangdream", "arknights", "fgo"
	Pool          string                 `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"` // optional pool/bannner id; empty for game-level config
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameRef) Reset() {
	*x = GameRef{}
	mi := &file_gacha_v1_gacha_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRef) ProtoMessage() {}

func (x *GameRef) ProtoReflect() protoreflect.Message {
	mi := &file_gacha_v1_gacha_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRef.ProtoReflect.Descriptor instead.
func (*GameRef) Descriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{0}
}

func (x *GameRef) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *GameRef) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

// Soft pity overrides (request-level). Use only the fields you want to override.
type SoftPityOverrides struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mode          SoftPityMode           `protobuf:"varint,1,opt,name=mode,proto3,enum=gacha.v1.SoftPityMode" json:"mode,omitempty"` // optional, defaults to config
	StartAt       int32                  `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`       // 0-based index since last hit
	StartPct      float64                `protobuf:"fixed64,3,opt,name=start_pct,json=startPct,proto3" json:"start_pct,omitempty"`   // alternative to start_at, [0..1]
	Target        float64                `protobuf:"fixed64,4,opt,name=target,proto3" json:"target,omitempty"`                       // TARGET_RAMP: probability at (pity-1)
	Increment     float64                `protobuf:"fixed64,5,opt,name=increment,proto3" json:"increment,omitempty"`                 // PER_DRAW_INCREMENT: +p per draw after start
	Easing        Easing                 `protobuf:"varint,6,opt,name=easing,proto3,enum=gacha.v1.Easing" json:"easing,omitempty"`   // easing for TARGET_RAMP
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SoftPityOverrides) Reset() {
	*x = SoftPityOverrides{}
	mi := &file_gacha_v1_gacha_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SoftPityOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftPityOverrides) ProtoMessage() {}

func (x *SoftPityOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_gacha_v1_gacha_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftPityOverrides.ProtoReflect.Descriptor instead.
func (*SoftPityOverrides) Descriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{1}
}

func (x *SoftPityOverrides) GetMode() SoftPityMode {
	if x != nil {
		return x.Mode
	}
	return SoftPityMode_SOFT_PITY_MODE_UNSPECIFIED
}

func (x *SoftPityOverrides) GetStartAt() int32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *SoftPityOverrides) GetStartPct() float64 {
	if x != nil {
		return x.StartPct
	}
	return 0
}

func (x *SoftPityOverrides) GetTarget() float64 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *SoftPityOverrides) GetIncrement() float64 {
	if x != nil {
		return x.Increment
	}
	return 0
}

func (x *SoftPityOverrides) GetEasing() Easing {
	if x != nil {
		return x.Easing
	}
	return Easing_EASING_UNSPECIFIED
}

// Banner (UP/off) overrides.
type BannerOverrides struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OffProbs      []float64              `protobuf:"fixed64,1,rep,packed,name=off_probs,json=offProbs,proto3" json:"off_probs,omitempty"` // e.g., [0.5] or [0.5,0.4,0.3], each in (0,1)
	MaxOff        int32                  `protobuf:"varint,2,opt,name=max_off,json=maxOff,proto3" json:"max_off,omitempty"`               // <=0 means default to len(off_probs)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BannerOverrides) Reset() {
	*x = BannerOverrides{}
	mi := &file_gacha_v1_gacha_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BannerOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerOverrides) ProtoMessage() {}

func (x *BannerOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_gacha_v1_gacha_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerOverrides.ProtoReflect.Descriptor instead.
func (*BannerOverrides) Descriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{2}
}

func (x *BannerOverrides) GetOffProbs() []float64 {
	if x != nil {
		return x.OffProbs
	}
	return nil
}

func (x *BannerOverrides) GetMaxOff() int32 {
	if x != nil {
		return x.MaxOff
	}
	return 0
}

// Common resolution request: merge default -> game -> pool -> overrides to parameters.
type ResolveRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Ref   *GameRef               `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// Optional overrides
	PBase         float64            `protobuf:"fixed64,2,opt,name=p_base,json=pBase,proto3" json:"p_base,omitempty"` // in (0,1)
	Pity          int32              `protobuf:"varint,3,opt,name=pity,proto3" json:"pity,omitempty"`                 // >=1
	Soft          *SoftPityOverrides `protobuf:"bytes,4,opt,name=soft,proto3" json:"soft,omitempty"`                  // optional
	Banner        *BannerOverrides   `protobuf:"bytes,5,opt,name=banner,proto3" json:"banner,omitempty"`              // optional
	Cushion       int32              `protobuf:"varint,6,opt,name=cushion,proto3" json:"cushion,omitempty"`           // initial draws since last hit when entering the pool
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResolveRequest) Reset() {
	*x = ResolveRequest{}
	mi := &file_gacha_v1_gacha_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRequest) ProtoMessage() {}

func (x *ResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gacha_v1_gacha_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRequest.ProtoReflect.Descriptor instead.
func (*ResolveRequest) Descriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{3}
}

func (x *ResolveRequest) GetRef() *GameRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *ResolveRequest) GetPBase() float64 {
	if x != nil {
		return x.PBase
	}
	return 0
}

func (x *ResolveRequest) GetPity() int32 {
	if x != nil {
		return x.Pity
	}
	return 0
}

func (x *ResolveRequest) GetSoft() *SoftPityOverrides {
	if x != nil {
		return x.Soft
	}
	return nil
}

func (x *ResolveRequest) GetBanner() *BannerOverrides {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *ResolveRequest) GetCushion() int32 {
	if x != nil {
		return x.Cushion
	}
	return 0
}

type ResolveResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fully-resolved effective parameters the engine will use.
	PBase    float64      `protobuf:"fixed64,1,opt,name=p_base,json=pBase,proto3" json:"p_base,omitempty"`
	Pity     int32        `protobuf:"varint,2,opt,name=pity,proto3" json:"pity,omitempty"`
	SoftMode SoftPityMode `protobuf:"varint,3,opt,name=soft_mode,json=softMode,proto3,enum=gacha.v1.SoftPityMode" json:"soft_mode,omitempty"`
	// For TARGET_RAMP
	StartAt  int32   `protobuf:"varint,4,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	StartPct float64 `protobuf:"fixed64,5,opt,name=start_pct,json=startPct,proto3" json:"start_pct,omitempty"`
	Target   float64 `protobuf:"fixed64,6,opt,name=target,proto3" json:"target,omitempty"`
	Easing   Easing  `protobuf:"varint,7,opt,name=easing,proto3,enum=gacha.v1.Easing" json:"easing,omitempty"`
	// For PER_DRAW_INCREMENT
	Increment float64 `protobuf:"fixed64,8,opt,name=increment,proto3" json:"increment,omitempty"`
	// Banner
	OffProbs []float64 `protobuf:"fixed64,20,rep,packed,name=off_probs,json=offProbs,proto3" json:"off_probs,omitempty"`
	MaxOff   int32     `protobuf:"varint,21,opt,name=max_off,json=maxOff,proto3" json:"max_off,omitempty"`
	// Carry-over count
	Cushion int32 `protobuf:"varint,30,opt,name=cushion,proto3" json:"cushion,omitempty"`
	// Config tracing
	EffectiveVersion string `protobuf:"bytes,40,opt,name=effective_version,json=effectiveVersion,proto3" json:"effective_version,omitempty"`
	Notes            string `protobuf:"bytes,41,opt,name=notes,proto3" json:"notes,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ResolveResponse) Reset() {
	*x = ResolveResponse{}
	mi := &file_gacha_v1_gacha_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveResponse) ProtoMessage() {}

func (x *ResolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gacha_v1_gacha_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveResponse.ProtoReflect.Descriptor instead.
func (*ResolveResponse) Descriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{4}
}

func (x *ResolveResponse) GetPBase() float64 {
	if x != nil {
		return x.PBase
	}
	return 0
}

func (x *ResolveResponse) GetPity() int32 {
	if x != nil {
		return x.Pity
	}
	return 0
}

func (x *ResolveResponse) GetSoftMode() SoftPityMode {
	if x != nil {
		return x.SoftMode
	}
	return SoftPityMode_SOFT_PITY_MODE_UNSPECIFIED
}

func (x *ResolveResponse) GetStartAt() int32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *ResolveResponse) GetStartPct() float64 {
	if x != nil {
		return x.StartPct
	}
	return 0
}

func (x *ResolveResponse) GetTarget() float64 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *ResolveResponse) GetEasing() Easing {
	if x != nil {
		return x.Easing
	}
	return Easing_EASING_UNSPECIFIED
}

func (x *ResolveResponse) GetIncrement() float64 {
	if x != nil {
		return x.Increment
	}
	return 0
}

func (x *ResolveResponse) GetOffProbs() []float64 {
	if x != nil {
		return x.OffProbs
	}
	return nil
}

func (x *ResolveResponse) GetMaxOff() int32 {
	if x != nil {
		return x.MaxOff
	}
	return 0
}

func (x *ResolveResponse) GetCushion() int32 {
	if x != nil {
		return x.Cushion
	}
	return 0
}

func (x *ResolveResponse) GetEffectiveVersion() string {
	if x != nil {
		return x.EffectiveVersion
	}
	return ""
}

func (x *ResolveResponse) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// N-draw (no pity/bannner)
type DrawNRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Ref   *GameRef               `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	N     int32                  `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"` // required, >0
	// Optional overrides:
	PBase         float64 `protobuf:"fixed64,3,opt,name=p_base,json=pBase,proto3" json:"p_base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawNRequest) Reset() {
	*x = DrawNRequest{}
	mi := &file_gacha_v1_gacha_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawNRequest) ProtoMessage() {}

func (x *DrawNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gacha_v1_gacha_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawNRequest.ProtoReflect.Descriptor instead.
func (*DrawNRequest) Descriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{5}
}

func (x *DrawNRequest) GetRef() *GameRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *DrawNRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *DrawNRequest) GetPBase() float64 {
	if x != nil {
		return x.PBase
	}
	return 0
}

type DrawNResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hits          []bool                 `protobuf:"varint,1,rep,packed,name=hits,proto3" json:"hits,omitempty"` // length n
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawNResponse) Reset() {
	*x = DrawNResponse{}
	mi := &file_gacha_v1_gacha_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawNResponse) ProtoMessage() {}

func (x *DrawNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gacha_v1_gacha_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawNResponse.ProtoReflect.Descriptor instead.
func (*DrawNResponse) Descriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{6}
}

func (x *DrawNResponse) GetHits() []bool {
	if x != nil {
		return x.Hits
	}
	return nil
}

// N-draw with soft/hard pity but no banner layer.
type DrawNPityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Ref   *GameRef               `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	N     int32                  `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"` // required
	// Optional overrides:
	PBase         float64            `protobuf:"fixed64,3,opt,name=p_base,json=pBase,proto3" json:"p_base,omitempty"`
	Pity          int32              `protobuf:"varint,4,opt,name=pity,proto3" json:"pity,omitempty"`
	Soft          *SoftPityOverrides `protobuf:"bytes,5,opt,name=soft,proto3" json:"soft,omitempty"`
	Cushion       int32              `protobuf:"varint,6,opt,name=cushion,proto3" json:"cushion,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawNPityRequest) Reset() {
	*x = DrawNPityRequest{}
	mi := &file_gacha_v1_gacha_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawNPityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawNPityRequest) ProtoMessage() {}

func (x *DrawNPityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gacha_v1_gacha_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawNPityRequest.ProtoReflect.Descriptor instead.
func (*DrawNPityRequest) Descriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{7}
}

func (x *DrawNPityRequest) GetRef() *GameRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *DrawNPityRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *DrawNPityRequest) GetPBase() float64 {
	if x != nil {
		return x.PBase
	}
	return 0
}

func (x *DrawNPityRequest) GetPity() int32 {
	if x != nil {
		return x.Pity
	}
	return 0
}

func (x *DrawNPityRequest) GetSoft() *SoftPityOverrides {
	if x != nil {
		return x.Soft
	}
	return nil
}

func (x *DrawNPityRequest) GetCushion() int32 {
	if x != nil {
		return x.Cushion
	}
	return 0
}

type DrawNPityResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hits          []bool                 `protobuf:"varint,1,rep,packed,name=hits,proto3" json:"hits,omitempty"` // length n
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`      // draws since last hit after the batch
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawNPityResponse) Reset() {
	*x = DrawNPityResponse{}
	mi := &file_gacha_v1_gacha_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawNPityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawNPityResponse) ProtoMessage() {}

func (x *DrawNPityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gacha_v1_gacha_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawNPityResponse.ProtoReflect.Descriptor instead.
func (*DrawNPityResponse) Descriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{8}
}

func (x *DrawNPityResponse) GetHits() []bool {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *DrawNPityResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Banner outcome per draw.
type BannerOutcome struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hit           bool                   `protobuf:"varint,1,opt,name=hit,proto3" json:"hit,omitempty"`               // high-rarity occurred
	IsUp          bool                   `protobuf:"varint,2,opt,name=is_up,json=isUp,proto3" json:"is_up,omitempty"` // true if featured (UP) when hit==true
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BannerOutcome) Reset() {
	*x = BannerOutcome{}
	mi := &file_gacha_v1_gacha_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BannerOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannerOutcome) ProtoMessage() {}

func (x *BannerOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_gacha_v1_gacha_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannerOutcome.ProtoReflect.Descriptor instead.
func (*BannerOutcome) Descriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{9}
}

func (x *BannerOutcome) GetHit() bool {
	if x != nil {
		return x.Hit
	}
	return false
}

func (x *BannerOutcome) GetIsUp() bool {
	if x != nil {
		return x.IsUp
	}
	return false
}

// N-draw with soft/hard pity + banner multi-off logic.
type DrawNBannerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Ref   *GameRef               `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	N     int32                  `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"` // required
	// Optional overrides:
	PBase         float64            `protobuf:"fixed64,3,opt,name=p_base,json=pBase,proto3" json:"p_base,omitempty"`
	Pity          int32              `protobuf:"varint,4,opt,name=pity,proto3" json:"pity,omitempty"`
	Soft          *SoftPityOverrides `protobuf:"bytes,5,opt,name=soft,proto3" json:"soft,omitempty"`
	Cushion       int32              `protobuf:"varint,6,opt,name=cushion,proto3" json:"cushion,omitempty"`
	Banner        *BannerOverrides   `protobuf:"bytes,7,opt,name=banner,proto3" json:"banner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawNBannerRequest) Reset() {
	*x = DrawNBannerRequest{}
	mi := &file_gacha_v1_gacha_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawNBannerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawNBannerRequest) ProtoMessage() {}

func (x *DrawNBannerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gacha_v1_gacha_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawNBannerRequest.ProtoReflect.Descriptor instead.
func (*DrawNBannerRequest) Descriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{10}
}

func (x *DrawNBannerRequest) GetRef() *GameRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *DrawNBannerRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *DrawNBannerRequest) GetPBase() float64 {
	if x != nil {
		return x.PBase
	}
	return 0
}

func (x *DrawNBannerRequest) GetPity() int32 {
	if x != nil {
		return x.Pity
	}
	return 0
}

func (x *DrawNBannerRequest) GetSoft() *SoftPityOverrides {
	if x != nil {
		return x.Soft
	}
	return nil
}

func (x *DrawNBannerRequest) GetCushion() int32 {
	if x != nil {
		return x.Cushion
	}
	return 0
}

func (x *DrawNBannerRequest) GetBanner() *BannerOverrides {
	if x != nil {
		return x.Banner
	}
	return nil
}

type DrawNBannerResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Results        []*BannerOutcome       `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`                                      // length n
	Count          int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`                                         // pity counter after the batch
	GuaranteedNext bool                   `protobuf:"varint,3,opt,name=guaranteed_next,json=guaranteedNext,proto3" json:"guaranteed_next,omitempty"` // next hit must be UP
	OffStreak      int32                  `protobuf:"varint,4,opt,name=off_streak,json=offStreak,proto3" json:"off_streak,omitempty"`                // consecutive offs after the batch
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DrawNBannerResponse) Reset() {
	*x = DrawNBannerResponse{}
	mi := &file_gacha_v1_gacha_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawNBannerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawNBannerResponse) ProtoMessage() {}

func (x *DrawNBannerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gacha_v1_gacha_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawNBannerResponse.ProtoReflect.Descriptor instead.
func (*DrawNBannerResponse) Descriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{11}
}

func (x *DrawNBannerResponse) GetResults() []*BannerOutcome {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *DrawNBannerResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DrawNBannerResponse) GetGuaranteedNext() bool {
	if x != nil {
		return x.GuaranteedNext
	}
	return false
}

func (x *DrawNBannerResponse) GetOffStreak() int32 {
	if x != nil {
		return x.OffStreak
	}
	return 0
}

// Monte Carlo simulation.
type SimulateRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Ref    *GameRef               `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Goal   TrialGoal              `protobuf:"varint,2,opt,name=goal,proto3,enum=gacha.v1.TrialGoal" json:"goal,omitempty"` // default FIRST_UP if unspecified
	Trials int32                  `protobuf:"varint,3,opt,name=trials,proto3" json:"trials,omitempty"`                     // required, >0
	// Optional overrides (same as draw banner; include cushion & banner)
	PBase   float64            `protobuf:"fixed64,10,opt,name=p_base,json=pBase,proto3" json:"p_base,omitempty"`
	Pity    int32              `protobuf:"varint,11,opt,name=pity,proto3" json:"pity,omitempty"`
	Soft    *SoftPityOverrides `protobuf:"bytes,12,opt,name=soft,proto3" json:"soft,omitempty"`
	Cushion int32              `protobuf:"varint,13,opt,name=cushion,proto3" json:"cushion,omitempty"`
	Banner  *BannerOverrides   `protobuf:"bytes,14,opt,name=banner,proto3" json:"banner,omitempty"`
	// Only used for FIXED_BUDGET
	BudgetN       int32 `protobuf:"varint,20,opt,name=budget_n,json=budgetN,proto3" json:"budget_n,omitempty"` // number of draws per trial
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimulateRequest) Reset() {
	*x = SimulateRequest{}
	mi := &file_gacha_v1_gacha_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimulateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateRequest) ProtoMessage() {}

func (x *SimulateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gacha_v1_gacha_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateRequest.ProtoReflect.Descriptor instead.
func (*SimulateRequest) Descriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{12}
}

func (x *SimulateRequest) GetRef() *GameRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *SimulateRequest) GetGoal() TrialGoal {
	if x != nil {
		return x.Goal
	}
	return TrialGoal_TRIAL_GOAL_UNSPECIFIED
}

func (x *SimulateRequest) GetTrials() int32 {
	if x != nil {
		return x.Trials
	}
	return 0
}

func (x *SimulateRequest) GetPBase() float64 {
	if x != nil {
		return x.PBase
	}
	return 0
}

func (x *SimulateRequest) GetPity() int32 {
	if x != nil {
		return x.Pity
	}
	return 0
}

func (x *SimulateRequest) GetSoft() *SoftPityOverrides {
	if x != nil {
		return x.Soft
	}
	return nil
}

func (x *SimulateRequest) GetCushion() int32 {
	if x != nil {
		return x.Cushion
	}
	return 0
}

func (x *SimulateRequest) GetBanner() *BannerOverrides {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *SimulateRequest) GetBudgetN() int32 {
	if x != nil {
		return x.BudgetN
	}
	return 0
}

type SimulateResponse struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Mean     float64                `protobuf:"fixed64,1,opt,name=mean,proto3" json:"mean,omitempty"`
	Variance float64                `protobuf:"fixed64,2,opt,name=variance,proto3" json:"variance,omitempty"`
	StdDev   float64                `protobuf:"fixed64,3,opt,name=std_dev,json=stdDev,proto3" json:"std_dev,omitempty"`
	P50      float64                `protobuf:"fixed64,4,opt,name=p50,proto3" json:"p50,omitempty"`
	P90      float64                `protobuf:"fixed64,5,opt,name=p90,proto3" json:"p90,omitempty"`
	P99      float64                `protobuf:"fixed64,6,opt,name=p99,proto3" json:"p99,omitempty"`
	// echo back version for tracing
	EffectiveVersion string `protobuf:"bytes,10,opt,name=effective_version,json=effectiveVersion,proto3" json:"effective_version,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SimulateResponse) Reset() {
	*x = SimulateResponse{}
	mi := &file_gacha_v1_gacha_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimulateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateResponse) ProtoMessage() {}

func (x *SimulateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gacha_v1_gacha_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateResponse.ProtoReflect.Descriptor instead.
func (*SimulateResponse) Descriptor() ([]byte, []int) {
	return file_gacha_v1_gacha_proto_rawDescGZIP(), []int{13}
}

func (x *SimulateResponse) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *SimulateResponse) GetVariance() float64 {
	if x != nil {
		return x.Variance
	}
	return 0
}

func (x *SimulateResponse) GetStdDev() float64 {
	if x != nil {
		return x.StdDev
	}
	return 0
}

func (x *SimulateResponse) GetP50() float64 {
	if x != nil {
		return x.P50
	}
	return 0
}

func (x *SimulateResponse) GetP90() float64 {
	if x != nil {
		return x.P90
	}
	return 0
}

func (x *SimulateResponse) GetP99() float64 {
	if x != nil {
		return x.P99
	}
	return 0
}

func (x *SimulateResponse) GetEffectiveVersion() string {
	if x != nil {
		return x.EffectiveVersion
	}
	return ""
}

var File_gacha_v1_gacha_proto protoreflect.FileDescriptor

const file_gacha_v1_gacha_proto_rawDesc = "" +
	"\n" +
	"\x14gacha/v1/gacha.proto\x12\bgacha.v1\"1\n" +
	"\aGameRef\x12\x12\n" +
	"\x04game\x18\x01 \x01(\tR\x04game\x12\x12\n" +
	"\x04pool\x18\x02 \x01(\tR\x04pool\"\xd7\x01\n" +
	"\x11SoftPityOverrides\x12*\n" +
	"\x04mode\x18\x01 \x01(\x0e2\x16.gacha.v1.SoftPityModeR\x04mode\x12\x19\n" +
	"\bstart_at\x18\x02 \x01(\x05R\astartAt\x12\x1b\n" +
	"\tstart_pct\x18\x03 \x01(\x01R\bstartPct\x12\x16\n" +
	"\x06target\x18\x04 \x01(\x01R\x06target\x12\x1c\n" +
	"\tincrement\x18\x05 \x01(\x01R\tincrement\x12(\n" +
	"\x06easing\x18\x06 \x01(\x0e2\x10.gacha.v1.EasingR\x06easing\"G\n" +
	"\x0fBannerOverrides\x12\x1b\n" +
	"\toff_probs\x18\x01 \x03(\x01R\boffProbs\x12\x17\n" +
	"\amax_off\x18\x02 \x01(\x05R\x06maxOff\"\xde\x01\n" +
	"\x0eResolveRequest\x12#\n" +
	"\x03ref\x18\x01 \x01(\v2\x11.gacha.v1.GameRefR\x03ref\x12\x15\n" +
	"\x06p_base\x18\x02 \x01(\x01R\x05pBase\x12\x12\n" +
	"\x04pity\x18\x03 \x01(\x05R\x04pity\x12/\n" +
	"\x04soft\x18\x04 \x01(\v2\x1b.gacha.v1.SoftPityOverridesR\x04soft\x121\n" +
	"\x06banner\x18\x05 \x01(\v2\x19.gacha.v1.BannerOverridesR\x06banner\x12\x18\n" +
	"\acushion\x18\x06 \x01(\x05R\acushion\"\x9c\x03\n" +
	"\x0fResolveResponse\x12\x15\n" +
	"\x06p_base\x18\x01 \x01(\x01R\x05pBase\x12\x12\n" +
	"\x04pity\x18\x02 \x01(\x05R\x04pity\x123\n" +
	"\tsoft_mode\x18\x03 \x01(\x0e2\x16.gacha.v1.SoftPityModeR\bsoftMode\x12\x19\n" +
	"\bstart_at\x18\x04 \x01(\x05R\astartAt\x12\x1b\n" +
	"\tstart_pct\x18\x05 \x01(\x01R\bstartPct\x12\x16\n" +
	"\x06target\x18\x06 \x01(\x01R\x06target\x12(\n" +
	"\x06easing\x18\a \x01(\x0e2\x10.gacha.v1.EasingR\x06easing\x12\x1c\n" +
	"\tincrement\x18\b \x01(\x01R\tincrement\x12\x1b\n" +
	"\toff_probs\x18\x14 \x03(\x01R\boffProbs\x12\x17\n" +
	"\amax_off\x18\x15 \x01(\x05R\x06maxOff\x12\x18\n" +
	"\acushion\x18\x1e \x01(\x05R\acushion\x12+\n" +
	"\x11effective_version\x18( \x01(\tR\x10effectiveVersion\x12\x14\n" +
	"\x05notes\x18) \x01(\tR\x05notes\"X\n" +
	"\fDrawNRequest\x12#\n" +
	"\x03ref\x18\x01 \x01(\v2\x11.gacha.v1.GameRefR\x03ref\x12\f\n" +
	"\x01n\x18\x02 \x01(\x05R\x01n\x12\x15\n" +
	"\x06p_base\x18\x03 \x01(\x01R\x05pBase\"#\n" +
	"\rDrawNResponse\x12\x12\n" +
	"\x04hits\x18\x01 \x03(\bR\x04hits\"\xbb\x01\n" +
	"\x10DrawNPityRequest\x12#\n" +
	"\x03ref\x18\x01 \x01(\v2\x11.gacha.v1.GameRefR\x03ref\x12\f\n" +
	"\x01n\x18\x02 \x01(\x05R\x01n\x12\x15\n" +
	"\x06p_base\x18\x03 \x01(\x01R\x05pBase\x12\x12\n" +
	"\x04pity\x18\x04 \x01(\x05R\x04pity\x12/\n" +
	"\x04soft\x18\x05 \x01(\v2\x1b.gacha.v1.SoftPityOverridesR\x04soft\x12\x18\n" +
	"\acushion\x18\x06 \x01(\x05R\acushion\"=\n" +
	"\x11DrawNPityResponse\x12\x12\n" +
	"\x04hits\x18\x01 \x03(\bR\x04hits\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\"6\n" +
	"\rBannerOutcome\x12\x10\n" +
	"\x03hit\x18\x01 \x01(\bR\x03hit\x12\x13\n" +
	"\x05is_up\x18\x02 \x01(\bR\x04isUp\"\xf0\x01\n" +
	"\x12DrawNBannerRequest\x12#\n" +
	"\x03ref\x18\x01 \x01(\v2\x11.gacha.v1.GameRefR\x03ref\x12\f\n" +
	"\x01n\x18\x02 \x01(\x05R\x01n\x12\x15\n" +
	"\x06p_base\x18\x03 \x01(\x01R\x05pBase\x12\x12\n" +
	"\x04pity\x18\x04 \x01(\x05R\x04pity\x12/\n" +
	"\x04soft\x18\x05 \x01(\v2\x1b.gacha.v1.SoftPityOverridesR\x04soft\x12\x18\n" +
	"\acushion\x18\x06 \x01(\x05R\acushion\x121\n" +
	"\x06banner\x18\a \x01(\v2\x19.gacha.v1.BannerOverridesR\x06banner\"\xa6\x01\n" +
	"\x13DrawNBannerResponse\x121\n" +
	"\aresults\x18\x01 \x03(\v2\x17.gacha.v1.BannerOutcomeR\aresults\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\x12'\n" +
	"\x0fguaranteed_next\x18\x03 \x01(\bR\x0eguaranteedNext\x12\x1d\n" +
	"\n" +
	"off_streak\x18\x04 \x01(\x05R\toffStreak\"\xbb\x02\n" +
	"\x0fSimulateRequest\x12#\n" +
	"\x03ref\x18\x01 \x01(\v2\x11.gacha.v1.GameRefR\x03ref\x12'\n" +
	"\x04goal\x18\x02 \x01(\x0e2\x13.gacha.v1.TrialGoalR\x04goal\x12\x16\n" +
	"\x06trials\x18\x03 \x01(\x05R\x06trials\x12\x15\n" +
	"\x06p_base\x18\n" +
	" \x01(\x01R\x05pBase\x12\x12\n" +
	"\x04pity\x18\v \x01(\x05R\x04pity\x12/\n" +
	"\x04soft\x18\f \x01(\v2\x1b.gacha.v1.SoftPityOverridesR\x04soft\x12\x18\n" +
	"\acushion\x18\r \x01(\x05R\acushion\x121\n" +
	"\x06banner\x18\x0e \x01(\v2\x19.gacha.v1.BannerOverridesR\x06banner\x12\x19\n" +
	"\bbudget_n\x18\x14 \x01(\x05R\abudgetN\"\xbe\x01\n" +
	"\x10SimulateResponse\x12\x12\n" +
	"\x04mean\x18\x01 \x01(\x01R\x04mean\x12\x1a\n" +
	"\bvariance\x18\x02 \x01(\x01R\bvariance\x12\x17\n" +
	"\astd_dev\x18\x03 \x01(\x01R\x06stdDev\x12\x10\n" +
	"\x03p50\x18\x04 \x01(\x01R\x03p50\x12\x10\n" +
	"\x03p90\x18\x05 \x01(\x01R\x03p90\x12\x10\n" +
	"\x03p99\x18\x06 \x01(\x01R\x03p99\x12+\n" +
	"\x11effective_version\x18\n" +
	" \x01(\tR\x10effectiveVersion*u\n" +
	"\fSoftPityMode\x12\x1e\n" +
	"\x1aSOFT_PITY_MODE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aSOFT_PITY_MODE_TARGET_RAMP\x10\x01\x12%\n" +
	"!SOFT_PITY_MODE_PER_DRAW_INCREMENT\x10\x02*k\n" +
	"\x06Easing\x12\x16\n" +
	"\x12EASING_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rEASING_LINEAR\x10\x01\x12\x18\n" +
	"\x14EASING_EASE_OUT_QUAD\x10\x02\x12\x1c\n" +
	"\x18EASING_EASE_IN_OUT_CUBIC\x10\x03*w\n" +
	"\tTrialGoal\x12\x1a\n" +
	"\x16TRIAL_GOAL_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14TRIAL_GOAL_FIRST_HIT\x10\x01\x12\x17\n" +
	"\x13TRIAL_GOAL_FIRST_UP\x10\x02\x12\x1b\n" +
	"\x17TRIAL_GOAL_FIXED_BUDGET\x10\x032\xdd\x02\n" +
	"\fGachaService\x12>\n" +
	"\aResolve\x12\x18.gacha.v1.ResolveRequest\x1a\x19.gacha.v1.ResolveResponse\x128\n" +
	"\x05DrawN\x12\x16.gacha.v1.DrawNRequest\x1a\x17.gacha.v1.DrawNResponse\x12D\n" +
	"\tDrawNPity\x12\x1a.gacha.v1.DrawNPityRequest\x1a\x1b.gacha.v1.DrawNPityResponse\x12J\n" +
	"\vDrawNBanner\x12\x1c.gacha.v1.DrawNBannerRequest\x1a\x1d.gacha.v1.DrawNBannerResponse\x12A\n" +
	"\bSimulate\x12\x19.gacha.v1.SimulateRequest\x1a\x1a.gacha.v1.SimulateResponseB9Z7github.com/xtding233/gacha-backend/gen/gacha/v1;gachav1b\x06proto3"

var (
	file_gacha_v1_gacha_proto_rawDescOnce sync.Once
	file_gacha_v1_gacha_proto_rawDescData []byte
)

func file_gacha_v1_gacha_proto_rawDescGZIP() []byte {
	file_gacha_v1_gacha_proto_rawDescOnce.Do(func() {
		file_gacha_v1_gacha_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gacha_v1_gacha_proto_rawDesc), len(file_gacha_v1_gacha_proto_rawDesc)))
	})
	return file_gacha_v1_gacha_proto_rawDescData
}

var file_gacha_v1_gacha_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_gacha_v1_gacha_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_gacha_v1_gacha_proto_goTypes = []any{
	(SoftPityMode)(0),           // 0: gacha.v1.SoftPityMode
	(Easing)(0),                 // 1: gacha.v1.Easing
	(TrialGoal)(0),              // 2: gacha.v1.TrialGoal
	(*GameRef)(nil),             // 3: gacha.v1.GameRef
	(*SoftPityOverrides)(nil),   // 4: gacha.v1.SoftPityOverrides
	(*BannerOverrides)(nil),     // 5: gacha.v1.BannerOverrides
	(*ResolveRequest)(nil),      // 6: gacha.v1.ResolveRequest
	(*ResolveResponse)(nil),     // 7: gacha.v1.ResolveResponse
	(*DrawNRequest)(nil),        // 8: gacha.v1.DrawNRequest
	(*DrawNResponse)(nil),       // 9: gacha.v1.DrawNResponse
	(*DrawNPityRequest)(nil),    // 10: gacha.v1.DrawNPityRequest
	(*DrawNPityResponse)(nil),   // 11: gacha.v1.DrawNPityResponse
	(*BannerOutcome)(nil),       // 12: gacha.v1.BannerOutcome
	(*DrawNBannerRequest)(nil),  // 13: gacha.v1.DrawNBannerRequest
	(*DrawNBannerResponse)(nil), // 14: gacha.v1.DrawNBannerResponse
	(*SimulateRequest)(nil),     // 15: gacha.v1.SimulateRequest
	(*SimulateResponse)(nil),    // 16: gacha.v1.SimulateResponse
}
var file_gacha_v1_gacha_proto_depIdxs = []int32{
	0,  // 0: gacha.v1.SoftPityOverrides.mode:type_name -> gacha.v1.SoftPityMode
	1,  // 1: gacha.v1.SoftPityOverrides.easing:type_name -> gacha.v1.Easing
	3,  // 2: gacha.v1.ResolveRequest.ref:type_name -> gacha.v1.GameRef
	4,  // 3: gacha.v1.ResolveRequest.soft:type_name -> gacha.v1.SoftPityOverrides
	5,  // 4: gacha.v1.ResolveRequest.banner:type_name -> gacha.v1.BannerOverrides
	0,  // 5: gacha.v1.ResolveResponse.soft_mode:type_name -> gacha.v1.SoftPityMode
	1,  // 6: gacha.v1.ResolveResponse.easing:type_name -> gacha.v1.Easing
	3,  // 7: gacha.v1.DrawNRequest.ref:type_name -> gacha.v1.GameRef
	3,  // 8: gacha.v1.DrawNPityRequest.ref:type_name -> gacha.v1.GameRef
	4,  // 9: gacha.v1.DrawNPityRequest.soft:type_name -> gacha.v1.SoftPityOverrides
	3,  // 10: gacha.v1.DrawNBannerRequest.ref:type_name -> gacha.v1.GameRef
	4,  // 11: gacha.v1.DrawNBannerRequest.soft:type_name -> gacha.v1.SoftPityOverrides
	5,  // 12: gacha.v1.DrawNBannerRequest.banner:type_name -> gacha.v1.BannerOverrides
	12, // 13: gacha.v1.DrawNBannerResponse.results:type_name -> gacha.v1.BannerOutcome
	3,  // 14: gacha.v1.SimulateRequest.ref:type_name -> gacha.v1.GameRef
	2,  // 15: gacha.v1.SimulateRequest.goal:type_name -> gacha.v1.TrialGoal
	4,  // 16: gacha.v1.SimulateRequest.soft:type_name -> gacha.v1.SoftPityOverrides
	5,  // 17: gacha.v1.SimulateRequest.banner:type_name -> gacha.v1.BannerOverrides
	6,  // 18: gacha.v1.GachaService.Resolve:input_type -> gacha.v1.ResolveRequest
	8,  // 19: gacha.v1.GachaService.DrawN:input_type -> gacha.v1.DrawNRequest
	10, // 20: gacha.v1.GachaService.DrawNPity:input_type -> gacha.v1.DrawNPityRequest
	13, // 21: gacha.v1.GachaService.DrawNBanner:input_type -> gacha.v1.DrawNBannerRequest
	15, // 22: gacha.v1.GachaService.Simulate:input_type -> gacha.v1.SimulateRequest
	7,  // 23: gacha.v1.GachaService.Resolve:output_type -> gacha.v1.ResolveResponse
	9,  // 24: gacha.v1.GachaService.DrawN:output_type -> gacha.v1.DrawNResponse
	11, // 25: gacha.v1.GachaService.DrawNPity:output_type -> gacha.v1.DrawNPityResponse
	14, // 26: gacha.v1.GachaService.DrawNBanner:output_type -> gacha.v1.DrawNBannerResponse
	16, // 27: gacha.v1.GachaService.Simulate:output_type -> gacha.v1.SimulateResponse
	23, // [23:28] is the sub-list for method output_type
	18, // [18:23] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_gacha_v1_gacha_proto_init() }
func file_gacha_v1_gacha_proto_init() {
	if File_gacha_v1_gacha_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gacha_v1_gacha_proto_rawDesc), len(file_gacha_v1_gacha_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gacha_v1_gacha_proto_goTypes,
		DependencyIndexes: file_gacha_v1_gacha_proto_depIdxs,
		EnumInfos:         file_gacha_v1_gacha_proto_enumTypes,
		MessageInfos:      file_gacha_v1_gacha_proto_msgTypes,
	}.Build()
	File_gacha_v1_gacha_proto = out.File
	file_gacha_v1_gacha_proto_goTypes = nil
	file_gacha_v1_gacha_proto_depIdxs = nil
}
